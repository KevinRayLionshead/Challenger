/*
 * Copyright (c) 2018-2019 Confetti Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shading.h"

// This compute shader determines if a light of index groupId overlaps
// the cluster (thread.x,thread.y). Then the light is added to the cluster.
RWStructuredBuffer<uint> lightClustersCount : register(u0, UPDATE_FREQ_PER_FRAME);
RWStructuredBuffer<uint> lightClusters : register(u1, UPDATE_FREQ_PER_FRAME);
ConstantBuffer<PerFrameConstants> uniforms : register(b2, UPDATE_FREQ_PER_FRAME);
StructuredBuffer<LightData> lights : register(t3);

[numthreads(LIGHT_CLUSTER_WIDTH, LIGHT_CLUSTER_HEIGHT, 1)]
void main(uint3 threadInGroupId : SV_GroupThreadID, uint3 groupId : SV_GroupID)
{
	const float invClusterWidth = 1.0f / float(LIGHT_CLUSTER_WIDTH);
	const float invClusterHeight = 1.0f / float(LIGHT_CLUSTER_HEIGHT);
	const float2 windowSize = uniforms.cullingViewports[VIEW_CAMERA].windowSize;
	
	const float aspectRatio = windowSize.x / windowSize.y;
	
	LightData lightData = lights[groupId.x];
	
	float4 lightPosWorldSpace = float4(lightData.position, 1);
	float4 lightPosClipSpace = mul(uniforms.transform[VIEW_CAMERA].mvp, lightPosWorldSpace);
	float invLightPosW = 1.0 / lightPosClipSpace.w;
	float3 lightPos = lightPosClipSpace.xyz * invLightPosW;
	
	// Early exit light if it's behind the camera
	if (lightPos.z < 0)
		return;
	
	float projRadius = LIGHT_SIZE * invLightPosW / 0.5f;    
	lightPos *= float3(aspectRatio,1,1);
	
	// Cluster coordinates in post perspective clip space
	float clusterLeft = float(threadInGroupId.x) * invClusterWidth;
	float clusterTop =  float(threadInGroupId.y) * invClusterHeight;
	float clusterRight = clusterLeft + invClusterWidth;
	float clusterBottom = clusterTop + invClusterHeight;
	
	// Transform coordinates from range [0..1] to range [-1..1]
	clusterLeft = clusterLeft*2.0f - 1.0f;
	clusterTop = clusterTop*2.0f - 1.0f;
	clusterRight = clusterRight*2.0f - 1.0f;
	clusterBottom = clusterBottom*2.0f - 1.0f;
	
	clusterLeft *= aspectRatio;
	clusterRight *= aspectRatio;
	
	float clusterCenterX = (clusterLeft + clusterRight) * 0.5f;
	float clusterCenterY = (clusterTop + clusterBottom) * 0.5f;
	float clusterRadius = distance(float2(clusterLeft, clusterTop), float2(clusterRight, clusterBottom))*0.5f;
	
	// Check if the light projection overlaps the cluster: add the light bit to this cluster coords
	float distanceToCenter = distance(float2(clusterCenterX, clusterCenterY), lightPos.xy);
	if (distanceToCenter  < projRadius + clusterRadius)
	{
		// Increase light count on this cluster
		uint lightArrayPos = 0;
		InterlockedAdd(lightClustersCount[LIGHT_CLUSTER_COUNT_POS(threadInGroupId.x, threadInGroupId.y)], 1, lightArrayPos);

		// Add light id to cluster
		InterlockedExchange(lightClusters[LIGHT_CLUSTER_DATA_POS(lightArrayPos, threadInGroupId.x, threadInGroupId.y)], groupId.x, lightArrayPos);
	}
}
