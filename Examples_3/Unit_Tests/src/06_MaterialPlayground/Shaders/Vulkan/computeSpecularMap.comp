/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License") you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
#version 450 core

// USERMACRO: IMPORTANCE_SAMPLE_COUNT [64,128,256,1024]

const float Pi = float (3.14159274);
const int SampleCount = int (IMPORTANCE_SAMPLE_COUNT);
struct PrecomputeSkySpecularData 
{
	uint mipSize;
	float roughness;
};

layout(push_constant) uniform RootConstant_Block
{
	uint mipSize;
	float roughness;
}RootConstant;

layout(UPDATE_FREQ_NONE, binding = 1) uniform textureCube srcTexture;
layout(UPDATE_FREQ_PER_DRAW, binding = 2, rgba32f) uniform image2DArray dstTexture;
layout(UPDATE_FREQ_NONE, binding = 3) uniform sampler skyboxSampler;

float RadicalInverse_VdC(uint bits)
{
	(bits = ((bits << uint (16)) | (bits >> uint (16))));
	(bits = (((bits & 1431655765u) << uint (1)) | ((bits & 2863311530u) >> uint (1))));
	(bits = (((bits & 858993459u) << uint (2)) | ((bits & 3435973836u) >> uint (2))));
	(bits = (((bits & 252645135u) << uint (4)) | ((bits & 4042322160u) >> uint (4))));
	(bits = (((bits & 16711935u) << uint (8)) | ((bits & 4278255360u) >> uint (8))));
	return (float(bits) * 2.328306e-10);
}

vec2 Hammersley(uint i, uint N)
{
	return vec2((float(i) / float(N)), RadicalInverse_VdC(i));
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a = (roughness * roughness);
	float a2 = (a * a);
	float NdotH = max(dot(N, H), float (0.0));
	float NdotH2 = (NdotH * NdotH);

	float nom = a2;
	float denom = ((NdotH2 * (a2 - float (1.0))) + float (1.0));
	(denom = ((Pi * denom) * denom));

	return (nom / denom);
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = (roughness * roughness);

	float phi = ((float (2.0) * Pi) * (Xi).x);
	float cosTheta = sqrt(((float (1.0) - (Xi).y) / (float (1.0) + (((a * a) - float (1.0)) * (Xi).y))));
	float sinTheta = sqrt((float (1.0) - (cosTheta * cosTheta)));

	vec3 H;
	((H).x = (cos(phi) * sinTheta));
	((H).y = (sin(phi) * sinTheta));
	((H).z = cosTheta);

	vec3 up = (((abs((N).z) < float (0.9990000))) ? (vec3(0.0, 0.0, 1.0)) : (vec3(1.0, 0.0, 0.0)));
	vec3 tangent = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	vec3 sampleVec = (((tangent * vec3 ((H).x)) + (bitangent * vec3 ((H).y))) + (N * vec3 ((H).z)));
	return normalize(sampleVec);
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void HLSLmain(uvec3 DTid)
{
	uvec3 threadPos = DTid;

	float mipRoughness = (RootConstant).roughness;
	uint mipSize = (RootConstant).mipSize;

	if ((((threadPos).x >= mipSize) || ((threadPos).y >= mipSize))) 
		return;

	vec2 texcoords = vec2((float((float ((threadPos).x) + 0.5)) / float (mipSize)), (float((float ((threadPos).y) + 0.5)) / float (mipSize)));

	vec3 sphereDir;
	if (((threadPos).z <= uint (0)))
		(sphereDir = normalize(vec3(0.5, (-((texcoords).y - float (0.5))), (-((texcoords).x - float (0.5))))));
	else if (((threadPos).z <= uint (1)))
		(sphereDir = normalize(vec3((-0.5), (-((texcoords).y - float (0.5))), ((texcoords).x - float (0.5)))));
	else if (((threadPos).z <= uint (2)))
		(sphereDir = normalize(vec3(((texcoords).x - float (0.5)), 0.5, ((texcoords).y - float (0.5)))));
	else if (((threadPos).z <= uint (3)))
		(sphereDir = normalize(vec3(((texcoords).x - float (0.5)), (-0.5), (-((texcoords).y - float (0.5))))));
	else if (((threadPos).z <= uint (4)))
		(sphereDir = normalize(vec3(((texcoords).x - float (0.5)), (-((texcoords).y - float (0.5))), 0.5)));
	else if (((threadPos).z <= uint (5)))
		(sphereDir = normalize(vec3((-((texcoords).x - float (0.5))), (-((texcoords).y - float (0.5))), (-0.5))));

	vec3 N = sphereDir;
	vec3 R = N;
	vec3 V = R;

	float totalWeight = float (0.0);
	vec4 prefilteredColor = vec4(0.0, 0.0, 0.0, 0.0);
	float srcTextureSize = float(textureSize(samplerCube(srcTexture, skyboxSampler), 0).s);

	for (int i = 0; (i < SampleCount); (++i)) 
	{
		vec2 Xi = Hammersley(uint (i), uint (SampleCount));
		vec3 H = ImportanceSampleGGX(Xi, N, mipRoughness);
		vec3 L = normalize(((vec3 ((float (2.0) * dot(V, H))) * H) - V));

		float NdotL = max(dot(N, L), float (0.0));
		if ((NdotL > float (0.0))) 
		{
			float D = DistributionGGX(N, H, mipRoughness);
			float NdotH = max(dot(N, H), float (0.0));
			float HdotV = max(dot(H, V), float (0.0));
			float pdf = (((D * NdotH) / (float (4.0) * HdotV)) + float (0.00010000000));

			float saTexel = 4.0 * Pi / (6.0 * srcTextureSize * srcTextureSize);
			float saSample = 1.0 / (float(SampleCount) * pdf + 0.0001);

			float mipLevel = mipRoughness == 0.0 ? 0.0 : max(0.5 * log2(saSample / saTexel) + 1.0f, 0.0f);

			(prefilteredColor += (textureLod(samplerCube(srcTexture, skyboxSampler), vec3(L), mipLevel) * vec4 (NdotL)));

			(totalWeight += NdotL);
		}
	}

	(prefilteredColor = (prefilteredColor / vec4 (totalWeight)));
	imageStore(dstTexture, ivec3(threadPos), prefilteredColor);
}

void main() 
{
	uvec3 DTid;
	DTid = gl_GlobalInvocationID;
	HLSLmain(DTid);
}
