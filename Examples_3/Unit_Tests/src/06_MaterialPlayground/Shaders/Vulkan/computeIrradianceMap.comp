/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License") you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
#version 450 core

const float Pi = float (3.141593);
const float SampleDelta = float (0.025000);

layout(UPDATE_FREQ_NONE, binding = 0) uniform textureCube srcTexture;

layout(UPDATE_FREQ_NONE, binding = 2, rgba32f) uniform image2DArray dstTexture;
layout(UPDATE_FREQ_NONE, binding = 3) uniform sampler skyboxSampler;

vec4 computeIrradiance(vec3 N) 
{
	vec4 irradiance = vec4(0.000000, 0.000000, 0.000000, 0.000000);

	vec3 up = vec3(0.000000, 1.000000, 0.000000);
	vec3 right = cross(up, N);
	(up = cross(N, right));

	float nrSamples = float (0.000000);

	for (float phi = float (0.000000); (phi < (float (2.000000) * Pi)); (phi += SampleDelta)) 
	{
		for (float theta = float (0.000000); (theta < (float (0.500000) * Pi)); (theta += SampleDelta)) 
		{
			vec3 tangentSample = vec3((sin(theta) * cos(phi)), (sin(theta) * sin(phi)), cos(theta));

			vec3 sampleVec = (((vec3 ((tangentSample).x) * right) + (vec3 ((tangentSample).y) * up)) + (vec3 ((tangentSample).z) * N));

			vec4 sampledValue = textureLod(samplerCube( srcTexture, skyboxSampler), vec3(sampleVec), float (0));

			(irradiance += vec4((((sampledValue).rgb * vec3 (cos(theta))) * vec3 (sin(theta))), (sampledValue).a));
			(nrSamples++);
		}
	}

	return ((vec4 (Pi) * irradiance) * vec4 ((float (1.000000) / float(nrSamples))));
}

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void HLSLmain(uvec3 DTid) 
{
	vec3 threadPos = vec3 (DTid);
	uint pixelOffset = uint (0);

	for (uint i = uint (0); (float (i) < (threadPos).z); (++i)) 
		(pixelOffset += uint ((32 * 32)));

	vec2 texcoords = vec2((float(((threadPos).x + float (0.500000))) / 32.000000), (float(((threadPos).y + float (0.500000))) / 32.000000));

	vec3 sphereDir;

	if (((threadPos).z <= float (0)))
		(sphereDir = normalize(vec3(0.500000, (-((texcoords).y - float (0.500000))), (-((texcoords).x - float (0.500000))))));
	else if (((threadPos).z <= float (1)))
		(sphereDir = normalize(vec3((-0.500000), (-((texcoords).y - float (0.500000))), ((texcoords).x - float (0.500000)))));
	else if (((threadPos).z <= float (2)))
		(sphereDir = normalize(vec3(((texcoords).x - float (0.500000)), 0.500000, ((texcoords).y - float (0.500000)))));
	else if (((threadPos).z <= float (3)))
		(sphereDir = normalize(vec3(((texcoords).x - float (0.500000)), (-0.500000), (-((texcoords).y - float (0.500000))))));
	else if (((threadPos).z <= float (4)))
		(sphereDir = normalize(vec3(((texcoords).x - float (0.500000)), (-((texcoords).y - float (0.500000))), 0.500000)));
	else if (((threadPos).z <= float (5)))
		(sphereDir = normalize(vec3((-((texcoords).x - float (0.500000))), (-((texcoords).y - float (0.500000))), (-0.500000))));

	uint pixelId = uint (((float (pixelOffset) + ((threadPos).y * float (32))) + (threadPos).x));

	vec4 irradiance = computeIrradiance(sphereDir);

	imageStore(dstTexture, ivec3(ivec3(threadPos)), irradiance);
}

void main() 
{
	uvec3 DTid;
	DTid = gl_GlobalInvocationID;
	HLSLmain(DTid);
}
