/*
 * Copyright (c) 2018-2019 Confetti Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

/*
*Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
*
*Permission is hereby granted, free of charge, to any person obtaining a copy
*of this software and associated documentation files (the "Software"), to deal
*in the Software without restriction, including without limitation the rights
*to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
*copies of the Software, and to permit persons to whom the Software is
*furnished to do so, subject to the following conditions:
*
*The above copyright notice and this permission notice shall be included in
*all copies or substantial portions of the Software.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
*AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
*LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
*OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
*THE SOFTWARE.
*/

#version 460 core
#define THREAD_GROUP_SIZE 64

struct VertexIndices
{
	uint globalStrandIndex;
	uint localStrandIndex;
	uint globalVertexIndex;
	uint localVertexIndex;
	uint indexSharedMem;
};

struct StrandIndices
{
	uint globalStrandIndex;
	uint globalRootVertexIndex;
};

struct Capsule
{
	vec3 center0;
	float radius0;
	vec3 center1;
	float radius1;
};

layout(UPDATE_FREQ_PER_DRAW, binding = 0) uniform cbSimulation
{
	mat4 Transform;
	vec4 QuatRotation;
#if HAIR_MAX_CAPSULE_COUNT > 0
	Capsule Capsules[HAIR_MAX_CAPSULE_COUNT];
	uint mCapsuleCount;
#endif
	float Scale;
	uint NumStrandsPerThreadGroup;
	uint NumFollowHairsPerGuideHair;
	uint NumVerticesPerStrand;
	float Damping;
	float GlobalConstraintStiffness;
	float GlobalConstraintRange;
	float VSPStrength;
	float VSPAccelerationThreshold;
	float LocalStiffness;
	uint LocalConstraintIterations;
	uint LengthConstraintIterations;
	float TipSeperationFactor;
};

layout(UPDATE_FREQ_PER_DRAW, binding = 1) uniform cbHairGlobal
{
	vec4 Viewport;
	vec4 Gravity;
	vec4 Wind;
	float TimeStep;
};

layout(UPDATE_FREQ_PER_DRAW, binding = 2) buffer HairVertexPositions
{
	vec4 HairVertexPosition[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 3) buffer HairVertexPositionsPrev
{
	vec4 HairVertexPositionPrev[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 4) buffer HairVertexPositionsPrevPrev
{
	vec4 HairVertexPositionPrevPrev[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 5) buffer HairVertexTangents
{
	vec4 HairVertexTangent[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 6) buffer HairRestPositions
{
	vec4 HairRestPosition[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 7) buffer HairRestLengths
{
	float HairRestLength[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 8) buffer HairGlobalRotations
{
	vec4 HairGlobalRotation[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 9) buffer HairRefsInLocalFrame
{
	vec4 HairRefInLocalFrame[];
};

layout(UPDATE_FREQ_PER_DRAW, binding = 10) buffer FollowHairRootOffsets
{
	vec4 FollowHairRootOffset[];
};

vec3 RotateVec(vec4 q, vec3 v)
{
	vec3 uv, uuv;
	vec3 qvec = vec3(q.x, q.y, q.z);
	uv = cross(qvec, v);
	uuv = cross(qvec, uv);
	uv *= (2.0f * q.w);
	uuv *= 2.0f;

	return v + uv + uuv;
}

vec4 InverseQuaternion(vec4 q)
{
	float lengthSqr = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;

	if (lengthSqr < 0.001)
		return vec4(0, 0, 0, 1.0f);

	q.x = -q.x / lengthSqr;
	q.y = -q.y / lengthSqr;
	q.z = -q.z / lengthSqr;
	q.w = q.w / lengthSqr;

	return q;
}

vec4 NormalizeQuaternion(vec4 q)
{
	vec4 qq = q;
	float n = q.x*q.x + q.y*q.y + q.z*q.z + q.w*q.w;

	if (n < 1e-10f)
	{
		qq.w = 1;
		return qq;
	}

	qq *= 1.0f / sqrt(n);
	return qq;
}

vec4 MultQuaternionAndQuaternion(vec4 qA, vec4 qB)
{
	vec4 q;

	q.w = qA.w * qB.w - qA.x * qB.x - qA.y * qB.y - qA.z * qB.z;
	q.x = qA.w * qB.x + qA.x * qB.w + qA.y * qB.z - qA.z * qB.y;
	q.y = qA.w * qB.y + qA.y * qB.w + qA.z * qB.x - qA.x * qB.z;
	q.z = qA.w * qB.z + qA.z * qB.w + qA.x * qB.y - qA.y * qB.x;

	return q;
}

vec4 MakeQuaternion(float angle_radian, vec3 axis)
{
	// create quaternion using angle and rotation axis
	vec4 quaternion;
	float halfAngle = 0.5f * angle_radian;
	float sinHalf = sin(halfAngle);

	quaternion.w = cos(halfAngle);
	quaternion.xyz = sinHalf * axis.xyz;

	return quaternion;
}

vec4 QuatFromUnitVectors(vec3 u, vec3 v)
{
	float r = 1.f + dot(u, v);
	vec3 n;

	// if u and v are parallel
	if (r < 1e-7)
	{
		r = 0.0f;
		n = abs(u.x) > abs(u.z) ? vec3(-u.y, u.x, 0.f) : vec3(0.f, -u.z, u.y);
	}
	else
	{
		n = cross(u, v);
	}

	vec4 q = vec4(n.x, n.y, n.z, r);
	return NormalizeQuaternion(q);
}


VertexIndices CalculateVertexIndices(uint localID, uint groupID)
{
	VertexIndices result;

	result.indexSharedMem = localID;

	result.localStrandIndex = localID % NumStrandsPerThreadGroup;
	result.globalStrandIndex = groupID * NumStrandsPerThreadGroup + result.localStrandIndex;
	result.globalStrandIndex *= NumFollowHairsPerGuideHair + 1;
	result.localVertexIndex = (localID - result.localStrandIndex) / NumStrandsPerThreadGroup;

	result.globalVertexIndex = result.globalStrandIndex * NumVerticesPerStrand + result.localVertexIndex;

	return result;
}

StrandIndices CalculateStrandIndices(uint localID, uint groupID)
{
	StrandIndices result;
	result.globalStrandIndex = THREAD_GROUP_SIZE * groupID + localID;
	result.globalStrandIndex *= NumFollowHairsPerGuideHair + 1;
	result.globalRootVertexIndex = result.globalStrandIndex * NumVerticesPerStrand;
	return result;
}

vec4 Integrate(vec4 currentPosition, vec4 prevPosition, vec4 force, VertexIndices indices)
{
	vec4 result = currentPosition;

	force.xyz += Gravity.xyz;
	result.xyz += (1.0f - Damping) * (currentPosition.xyz - prevPosition.xyz) + force.xyz * TimeStep * TimeStep;

	return result;
}

shared vec4 sharedPos[THREAD_GROUP_SIZE];
shared vec4 sharedTangent[THREAD_GROUP_SIZE];
shared float sharedLength[THREAD_GROUP_SIZE];

#ifdef HAIR_INTEGRATE
layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupIndex = gl_LocalInvocationIndex.x;
	uvec3 groupID = gl_WorkGroupID;
	
	VertexIndices indices = CalculateVertexIndices(groupIndex, groupID.x);

	vec4 restPosition = HairRestPosition[indices.globalVertexIndex];
	restPosition.xyz = (Transform * vec4(restPosition.xyz, 1.0f)).xyz;
	vec4 currentPosition = sharedPos[indices.indexSharedMem] = HairVertexPosition[indices.globalVertexIndex];
	float weight = currentPosition.w;

	groupMemoryBarrier();
	barrier();

	// Integrate
	vec4 prevPosition = HairVertexPositionPrev[indices.globalVertexIndex];
	vec4 force = vec4(0.0f);

	if (weight > 0.0f)	// Is movable
		sharedPos[indices.indexSharedMem] = Integrate(currentPosition, prevPosition, force, indices);
	else
		sharedPos[indices.indexSharedMem] = restPosition;

	// Global shape constraint
	if (GlobalConstraintStiffness > 0.0f && 
		GlobalConstraintRange > 0.0f && 
		sharedPos[indices.indexSharedMem].w > 0.0f && 
		float(indices.localVertexIndex) < GlobalConstraintRange * float(NumVerticesPerStrand))
	{
		sharedPos[indices.indexSharedMem].xyz += GlobalConstraintStiffness * (restPosition.xyz - sharedPos[indices.indexSharedMem].xyz);
	}

	HairVertexPositionPrevPrev[indices.globalVertexIndex] = HairVertexPositionPrev[indices.globalVertexIndex];
	HairVertexPositionPrev[indices.globalVertexIndex] = currentPosition;
	HairVertexPosition[indices.globalVertexIndex] = sharedPos[indices.indexSharedMem];
}
#elif defined(HAIR_SHOCK_PROPAGATION)
layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupIndex = gl_LocalInvocationIndex.x;
	uvec3 groupID = gl_WorkGroupID;

	StrandIndices indices = CalculateStrandIndices(groupIndex, groupID.x);

	vec4 rootPosPrevPrev;
	vec4 rootPosPrev[2];
	vec4 rootPos[2];

	rootPosPrevPrev = HairVertexPositionPrevPrev[indices.globalRootVertexIndex + 1];

	rootPosPrev[0] = HairVertexPositionPrev[indices.globalRootVertexIndex];
	rootPosPrev[1] = HairVertexPositionPrev[indices.globalRootVertexIndex + 1];

	rootPos[0] = HairVertexPosition[indices.globalRootVertexIndex];
	rootPos[1] = HairVertexPosition[indices.globalRootVertexIndex + 1];

	vec3 u = normalize(rootPosPrev[1].xyz - rootPosPrev[0].xyz);
	vec3 v = normalize(rootPos[1].xyz - rootPos[0].xyz);

	vec4 rotation = QuatFromUnitVectors(u, v);
	vec3 RotateVecation = rootPos[0].xyz - RotateVec(rotation, rootPosPrev[0].xyz);

	float vspStrength = VSPStrength;
	float acceleration = length((rootPos[1] - 2.0f * rootPosPrev[1] + rootPosPrevPrev[1]).xyz);

	if (acceleration > VSPAccelerationThreshold)
		vspStrength = 1.0f;

	for(uint localVertexIndex = 2; localVertexIndex < NumVerticesPerStrand; ++localVertexIndex)
	{
		uint globalVertexIndex = indices.globalRootVertexIndex + localVertexIndex;

		vec4 pos = HairVertexPosition[globalVertexIndex];
		vec4 posPrev = HairVertexPositionPrev[globalVertexIndex];

		pos.xyz = (1.0f - vspStrength) * pos.xyz + vspStrength * (RotateVec(rotation, pos.xyz) + RotateVecation);
		posPrev.xyz = (1.0f - vspStrength) * posPrev.xyz + vspStrength * (RotateVec(rotation, posPrev.xyz) + RotateVecation);

		HairVertexPosition[globalVertexIndex] = pos;
		HairVertexPositionPrev[globalVertexIndex] = posPrev;
	}
}
#elif defined(HAIR_LOCAL_CONSTRAINTS)
layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupIndex = gl_LocalInvocationIndex.x;
	uvec3 groupID = gl_WorkGroupID;
	
	StrandIndices indices = CalculateStrandIndices(groupIndex, groupID.x);

	float stiffness = LocalStiffness;
	stiffness = 0.5f * min(stiffness, 0.95f);

	uint globalVertexIndex = 0;
	vec4 position = HairVertexPosition[indices.globalRootVertexIndex + 1];
	vec4 nextPosition;
	vec4 globalRotation = HairGlobalRotation[indices.globalRootVertexIndex];
	vec4 worldRotation;

	for (uint localVertexIndex = 1; localVertexIndex < NumVerticesPerStrand - 1; ++localVertexIndex)
	{
		globalVertexIndex = indices.globalRootVertexIndex + localVertexIndex;
		nextPosition = HairVertexPosition[globalVertexIndex + 1];

		worldRotation = MultQuaternionAndQuaternion(QuatRotation, globalRotation);

		vec3 localNextPositionRest = HairRefInLocalFrame[globalVertexIndex + 1].xyz * Scale;
		vec3 globalNextPosition = RotateVec(worldRotation, localNextPositionRest) + position.xyz;

		vec3 weighted = stiffness * (globalNextPosition - nextPosition.xyz);

		if (position.w > 0.0f)
			position.xyz -= weighted;

		if (nextPosition.w > 0.0f)
			nextPosition.xyz += weighted;

		vec4 invGlobalRotation = InverseQuaternion(worldRotation);
		vec3 dir = normalize(nextPosition.xyz - position.xyz);

		vec3 x = normalize(RotateVec(invGlobalRotation, dir));
		vec3 e = vec3(1.0f, 0.0f, 0.0f);
		vec3 rotAxis = cross(e, x);

		if (length(rotAxis) > 0.001f)
		{
			float angle = acos(dot(e, x));
			rotAxis = normalize(rotAxis);
			vec4 localRotation = MakeQuaternion(angle, rotAxis);
			globalRotation = MultQuaternionAndQuaternion(globalRotation, localRotation);
		}

		HairVertexPosition[globalVertexIndex] = position;
		HairVertexPosition[globalVertexIndex + 1] = nextPosition;

		position = nextPosition;
	}
}
#elif defined(HAIR_LENGTH_CONSTRAINTS)
vec2 ConstraintMultiplier(vec4 particle0, vec4 particle1)
{
	if (particle0.w > 0.0f)
	{
		if (particle1.w > 0.0f)
			return vec2(0.5, 0.5);
		else
			return vec2(1, 0);
	}
	else
	{
		if (particle1.w > 0.0f)
			return vec2(0, 1);
		else
			return vec2(0, 0);
	}
}

void ApplyDistanceConstraint(inout vec4 pos0, inout vec4 pos1, float targetDistance)
{
	const float stiffness = 1.0f;
	vec3 delta = pos1.xyz - pos0.xyz;
	float distance = max(length(delta), 1e-7);
	float stretching = 1 - targetDistance / distance;
	delta = stretching * delta;
	vec2 multiplier = ConstraintMultiplier(pos0, pos1);

	pos0.xyz += multiplier[0] * delta * stiffness;
	pos1.xyz -= multiplier[1] * delta * stiffness;
}

bool CapsuleCollision(inout vec3 newPosition, vec3 prevPosition, const Capsule capsule)
{
	const float friction = 0.4f;

	vec3 segment = capsule.center1 - capsule.center0;
	vec3 delta0 = newPosition.xyz - capsule.center0;
	vec3 delta1 = capsule.center1 - newPosition.xyz;

	float dist0 = dot(delta0, segment);
	float dist1 = dot(delta1, segment);

	// Collide sphere 0
	if (dist0 < 0.0f)
	{
		if (dot(delta0, delta0) < capsule.radius0 * capsule.radius0)
		{
			vec3 n = normalize(delta0);
			newPosition = capsule.radius0 * n + capsule.center0;
			return true;
		}

		return false;
	}

	// Collide sphere 1
	if (dist1 < 0.0f)
	{
		if (dot(delta1, delta1) < capsule.radius1 * capsule.radius1)
		{
			vec3 n = normalize(-delta1);
			newPosition = capsule.radius1 * n + capsule.center1;
			return true;
		}

		return false;
	}

	// Collide cylinder
	vec3 x = (dist0 * capsule.center1 + dist1 * capsule.center0) / (dist0 + dist1);
	vec3 delta = newPosition - x;
	float radius = (dist0 * capsule.radius1 + dist1 * capsule.radius0) / (dist0 + dist1);

	if (dot(delta, delta) < radius * radius)
	{
		vec3 n = normalize(delta);
		vec3 vec = newPosition - prevPosition;
		vec3 nSeg = normalize(segment);
		vec3 tangent = dot(vec, nSeg) * nSeg;
		vec3 normal = vec - tangent;
		newPosition = prevPosition + friction * tangent + (normal + radius * n - delta);
		return true;
	}

	return false;
}

#if HAIR_MAX_CAPSULE_COUNT > 0
bool ResolveCapsuleCollisions(inout vec4 currentPosition, vec4 prevPosition)
{
	if (currentPosition.w == 0.0f)
		return false;

	bool anyCollided = false;

	vec3 newPosition = currentPosition.xyz;

	for (int i = 0; i < mCapsuleCount; ++i)
	{
		bool collided = CapsuleCollision(newPosition, prevPosition.xyz, Capsules[i]);

		if (collided)
			currentPosition.xyz = newPosition;

		anyCollided = anyCollided || collided;
	}

	return anyCollided;
}
#endif

layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupIndex = gl_LocalInvocationIndex.x;
	uvec3 groupID = gl_WorkGroupID;
	
	// Copy to shared memory
	VertexIndices indices = CalculateVertexIndices(groupIndex, groupID.x);
	sharedPos[indices.indexSharedMem] = HairVertexPosition[indices.globalVertexIndex];
	sharedLength[indices.indexSharedMem] = HairRestLength[indices.globalVertexIndex] * Scale;

	groupMemoryBarrier();
	barrier();
	
	// Wind
	if (indices.localVertexIndex >= 2 && indices.localVertexIndex < NumVerticesPerStrand - 1)
	{
		uint sharedIndex = indices.localVertexIndex * NumStrandsPerThreadGroup + indices.localStrandIndex;

		vec3 v = sharedPos[sharedIndex].xyz - sharedPos[sharedIndex + NumStrandsPerThreadGroup].xyz;
		vec3 force = -cross(cross(v, Wind.xyz), v);
		sharedPos[sharedIndex].xyz += force * TimeStep * TimeStep;
	}

	groupMemoryBarrier();
	barrier();

	// Length constraint
	uint a = uint(floor(NumVerticesPerStrand * 0.5f));
	uint b = uint(floor((NumVerticesPerStrand - 1) * 0.5f));

	for(uint i = 0; i < LengthConstraintIterations; ++i)
	{
		uint sharedIndex = 2 * indices.localVertexIndex * NumStrandsPerThreadGroup + indices.localStrandIndex;

		if (indices.localVertexIndex < a)
			ApplyDistanceConstraint(sharedPos[sharedIndex], sharedPos[sharedIndex + NumStrandsPerThreadGroup], sharedLength[sharedIndex]);

		groupMemoryBarrier();
		barrier();

		if (indices.localVertexIndex < b)
			ApplyDistanceConstraint(sharedPos[sharedIndex + NumStrandsPerThreadGroup], sharedPos[sharedIndex + NumStrandsPerThreadGroup * 2], sharedLength[sharedIndex + NumStrandsPerThreadGroup]);

		groupMemoryBarrier();
		barrier();
	}

#if HAIR_MAX_CAPSULE_COUNT > 0
	// Capsule collisions
	bool collided = ResolveCapsuleCollisions(sharedPos[indices.indexSharedMem], HairVertexPositionPrev[indices.globalVertexIndex]);
	if(collided)
		HairVertexPositionPrev[indices.globalVertexIndex] = sharedPos[indices.indexSharedMem];
	groupMemoryBarrier();
	barrier();
#endif

	// Calculate tangents
	vec3 tangent = sharedPos[indices.indexSharedMem + NumStrandsPerThreadGroup].xyz - sharedPos[indices.indexSharedMem].xyz;
	HairVertexTangent[indices.globalVertexIndex].xyz = normalize(tangent);

	HairVertexPosition[indices.globalVertexIndex] = sharedPos[indices.indexSharedMem];
}
#elif defined(HAIR_UPDATE_FOLLOW_HAIRS)
layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupIndex = gl_LocalInvocationIndex.x;
	uvec3 groupID = gl_WorkGroupID;
	
	VertexIndices indices = CalculateVertexIndices(groupIndex, groupID.x);

	sharedPos[indices.indexSharedMem] = HairVertexPosition[indices.globalVertexIndex];
	sharedTangent[indices.indexSharedMem] = HairVertexTangent[indices.globalVertexIndex];

	groupMemoryBarrier();
	barrier();

	for (uint i = 0; i < NumFollowHairsPerGuideHair; ++i)
	{
		uint globalFollowVertexIndex = indices.globalVertexIndex + NumVerticesPerStrand * (i + 1);
		uint globalFollowStrandIndex = indices.globalStrandIndex + i + 1;
		float factor = TipSeperationFactor * (float(indices.localVertexIndex) / float(NumVerticesPerStrand)) + 1.0f;
		vec3 followPosition = sharedPos[indices.indexSharedMem].xyz + factor * FollowHairRootOffset[globalFollowStrandIndex].xyz * Scale;
		HairVertexPosition[globalFollowVertexIndex].xyz = followPosition;
		HairVertexTangent[globalFollowVertexIndex] = sharedTangent[indices.indexSharedMem];
	}
}
#elif defined(HAIR_PRE_WARM)
layout(local_size_x = THREAD_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
void main()
{
	uint groupIndex = gl_LocalInvocationIndex.x;
	uvec3 groupID = gl_WorkGroupID;
	
	VertexIndices indices = CalculateVertexIndices(groupIndex, groupID.x);

	vec4 restPosition = HairRestPosition[indices.globalVertexIndex];
	restPosition.xyz = (Transform * vec4(restPosition.xyz, 1.0f)).xyz;
	HairVertexPositionPrevPrev[indices.globalVertexIndex] = restPosition;
	HairVertexPositionPrev[indices.globalVertexIndex] = restPosition;
	HairVertexPosition[indices.globalVertexIndex] = restPosition;
}
#endif