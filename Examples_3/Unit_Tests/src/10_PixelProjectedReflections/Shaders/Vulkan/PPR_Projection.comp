/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#version 450 core

#define WORKGROUP_X_SIZE_MAX 128
#define WORKGROUP_Y_SIZE_MAX 1
#define WORKGROUP_Z_SIZE_MAX 1

#define MAX_PLANES 4

#define UINT_MAX 4294967295
#define FLT_MAX  3.402823466e+38F

layout(local_size_x = WORKGROUP_X_SIZE_MAX, local_size_y = WORKGROUP_Y_SIZE_MAX, local_size_z = WORKGROUP_Z_SIZE_MAX) in;

layout(std140, UPDATE_FREQ_PER_FRAME, binding = 0) uniform cbExtendCamera
{
	mat4 viewMat;
	mat4 projMat;
	mat4 viewProjMat;
	mat4 InvViewProjMat;

	vec4 cameraWorldPos;
	vec4 viewPortSize;
};

layout(std430, UPDATE_FREQ_NONE, binding = 1) restrict buffer IntermediateBuffer
{
 	 uint Data[];
};

layout(UPDATE_FREQ_NONE, binding = 2) uniform texture2D DepthTexture;

struct PlaneInfo
{
	mat4 rotMat;
	vec4 centerPoint;
	vec4 size;
};

layout(UPDATE_FREQ_PER_FRAME, binding = 3) uniform planeInfoBuffer
{	
	PlaneInfo planeInfo[MAX_PLANES];
	uint numPlanes;
	uint pad00;
	uint pad01;
	uint pad02;
};

layout(UPDATE_FREQ_NONE, binding = 4) uniform sampler defaultSampler;


float getDistance(vec3 planeNormal, vec3 planeCenter, vec3 worldPos)
{
	//plane to point
	float d = -dot(planeNormal, planeCenter);
	return (dot(planeNormal, worldPos) + d) / length(planeNormal);
}

bool intersectPlane(in uint index, in vec3 worldPos, in vec2 fragUV, out vec4 reflectedPos) 
{ 
	PlaneInfo thisPlane = planeInfo[index];

	// assuming vectors are all normalized
	vec3 normalVec = thisPlane.rotMat[2].xyz;	
	vec3 centerPoint = thisPlane.centerPoint.xyz;
	vec3 projectedWorldPos = dot(normalVec, worldPos - centerPoint) * normalVec;
	vec3 target = worldPos - 2.0 * projectedWorldPos;

	//plane to point	
	float dist = getDistance(normalVec, centerPoint, target);
	
	//if target is on the upper-side of plane, false 
	if(dist >= 0.0)
		return false;	

	vec3 rO = cameraWorldPos.xyz;
	vec3 rD = normalize(target - rO);
	vec3 rD_VS = mat3(viewMat) * rD;
		
	if(rD_VS.z < 0.0)
		return false;	

    float denom = dot(normalVec, rD); 

    if (denom < 0.0)
	{ 
        vec3 p0l0 = centerPoint - rO; 
        float t = dot(normalVec, p0l0) / denom; 

		if(t <= 0.0)
			return false;

		vec3 hitPoint = rO + rD*t;	

		vec3 gap = hitPoint - centerPoint;
		
		float xGap = dot(gap, thisPlane.rotMat[0].xyz);
		float yGap = dot(gap, thisPlane.rotMat[1].xyz);

		float width = thisPlane.size.x * 0.5;
		float height = thisPlane.size.y * 0.5;

		if( (abs(xGap) <= width) && (abs(yGap) <= height))
		{
			reflectedPos = viewProjMat * vec4(hitPoint, 1.0);
			reflectedPos /= reflectedPos.w;

			reflectedPos.xy = vec2( (reflectedPos.x + 1.0) * 0.5, (1.0 - reflectedPos.y) * 0.5);

			float depth = texture( sampler2D(DepthTexture, defaultSampler), reflectedPos.xy).r;	

			if(depth <= reflectedPos.z)
				return false;
			
			if( reflectedPos.x < 0.0 || reflectedPos.y < 0.0  || reflectedPos.x > 1.0 || reflectedPos.y > 1.0 )
				return false;
			else
			{
				//check if it is also hit from other planes
				for(uint i=0; i <numPlanes; i++ )
				{
					if(i != index)
					{						
						PlaneInfo otherPlane = planeInfo[i];

						// assuming vectors are all normalized
						vec3 otherNormalVec = otherPlane.rotMat[2].xyz;	
						vec3 otherCenterPoint = otherPlane.centerPoint.xyz;

						float innerDenom = dot(otherNormalVec, rD); 

						if (innerDenom < 0.0)
						{ 
							vec3 innerP0l0 = otherCenterPoint - rO; 
							float innerT = dot(otherNormalVec, innerP0l0) / innerDenom; 

							if(innerT <= 0.0)
								continue;
							else if(innerT < t)
							{
								vec3 innerhitPoint = rO + rD*innerT;	
								vec3 innergap = innerhitPoint - otherCenterPoint;
		
								float innerxGap = dot(innergap, otherPlane.rotMat[0].xyz);
								float inneryGap = dot(innergap, otherPlane.rotMat[1].xyz);

								float innerWidth = otherPlane.size.x * 0.5;
								float innerHeight = otherPlane.size.y * 0.5;

								// if it hits other planes
								if( (abs(innerxGap) <= innerWidth) && (abs(inneryGap) <= innerHeight))
								{
									return false;
								}								
							}	
						}
					}
				}

				return true; 				
			}
		}	
		else
			return false;
    } 
	else
		return false; 
} 

vec4 getWorldPosition(vec2 UV, float depth)
{
	vec4 worldPos = InvViewProjMat * vec4(UV.x * 2.0 - 1.0, (1.0 - UV.y) * 2.0 - 1.0, depth, 1.0);
	worldPos /= worldPos.w;
	return worldPos;
}

uint packInfo(vec2 offset)
{
	uint CoordSys = 0;

	uint YInt = 0;
	int YFrac = 0;
	int XInt = 0;
	int XFrac = 0;

	//define CoordSystem
	if(abs(offset.y) < abs(offset.x) )
	{
		if(offset.x < 0.0) // 3
		{
			YInt = uint(-offset.x);
			YFrac = int(fract(offset.x)*8.0);
			
			XInt = int(offset.y);
			XFrac = int(fract(offset.y)*8.0);

			CoordSys = 3;
		}
		else // 1
		{
			YInt = uint(offset.x);
			YFrac = int(fract(offset.x)*8.0);
			
			XInt = int(offset.y);
			XFrac = int(fract(offset.y)*8.0);

			CoordSys = 1;
		}
	}
	else	
	{
		if(offset.y < 0.0) // 2
		{
			YInt = uint(-offset.y);
			YFrac = int(fract(offset.y)*8.0);
			
			XInt = int(offset.x);
			XFrac = int(fract(offset.x)*8.0);

			CoordSys = 2;
		}
		else // 0
		{
			YInt = uint(offset.y);
			YFrac = int(fract(offset.y)*8.0);
			
			XInt = int(offset.x);
			XFrac = int(fract(offset.x)*8.0);

			CoordSys = 0;
		}
	}

	return  ( (YInt & 0x00000fff ) << 20) | ( (YFrac & 0x00000007) << 17) | ( (XInt & 0x00000fff) << 5) | ( (XFrac & 0x00000007 )<< 2) | CoordSys;
}

void main() {
	
	uint screenWidth = uint( viewPortSize.x );
	uint screenHeight = uint( viewPortSize.y );
	
	uint index = gl_GlobalInvocationID.x;	

	if(index >= screenWidth * screenHeight)
		return;

	uint indexY = index / screenWidth;
	uint indexX = index - screenWidth * indexY;

	vec2 fragUV = vec2(float(indexX) / (viewPortSize.x), float(indexY) / (viewPortSize.y) );
	float depth = texture(sampler2D(DepthTexture, defaultSampler), fragUV).r;	

	//if there is no obj
	if(depth >= 1.0)
		return;

	vec4 worldPos = getWorldPosition(fragUV, depth);
	
	vec4 reflectedPos = vec4(0.0);
	vec2 reflectedUV;
	vec2 offset;

	float minDist = FLT_MAX;	

	for(uint i = 0; i < numPlanes; i++)
	{	
		
		if(intersectPlane( i, worldPos.xyz, fragUV, reflectedPos ))
		{
			reflectedUV =  vec2( reflectedPos.x * viewPortSize.x, reflectedPos.y * viewPortSize.y);
			offset = vec2( (fragUV.x - reflectedPos.x) * viewPortSize.x, ( fragUV.y - reflectedPos.y) * viewPortSize.y);

			//pack info
			uint intermediateBufferValue = packInfo(offset);			
			uint newIndex =  uint(reflectedUV.x) + uint(reflectedUV.y) * screenWidth;

			atomicMin( Data[newIndex], intermediateBufferValue);
		}		
	}

	
}