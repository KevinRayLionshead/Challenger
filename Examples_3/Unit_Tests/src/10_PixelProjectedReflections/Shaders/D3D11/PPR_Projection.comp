/*
* Copyright (c) 2018-2019 Confetti Interactive Inc.
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#define MAX_PLANES 4

#define UINT_MAX 4294967295
#define FLT_MAX  3.402823466e+38F


cbuffer cbExtendCamera : register(b0) {
	float4x4 viewMat;
	float4x4 projMat;
	float4x4 viewProjMat;
	float4x4 InvViewProjMat;

	float4 cameraWorldPos;
	float4 viewPortSize;
}

RWStructuredBuffer<uint> IntermediateBuffer : register(u1);

//Texture2D<> IntermediateBuffer : register(t1);

Texture2D<float> DepthTexture : register(t2);

struct PlaneInfo
{
	float4x4 rotMat;
	float4 centerPoint;
	float4 size;
};

cbuffer planeInfoBuffer : register(b3) {
	PlaneInfo planeInfo[MAX_PLANES];
	uint numPlanes;
	uint pad00;
	uint pad01;
	uint pad02;
}

SamplerState defaultSampler : register(s4);


float getDistance(float3 planeNormal, float3 planeCenter, float3 worldPos)
{
	//plane to point
	float d = -dot(planeNormal, planeCenter);
	return (dot(planeNormal, worldPos) + d) / length(planeNormal);
}

bool intersectPlane(in uint index, in float3 worldPos, in float2 fragUV, out float4 reflectedPos) 
{ 
	PlaneInfo thisPlane = planeInfo[index];

	// assuming vectors are all normalized
	float3 normalVec = thisPlane.rotMat[2].xyz;	

	float3 centerPoint = thisPlane.centerPoint.xyz;
	float3 projectedWorldPos = dot(normalVec, worldPos - centerPoint) * normalVec;
	float3 target = worldPos - 2.0 * projectedWorldPos;

	//plane to point	
	float dist = getDistance(normalVec, centerPoint, target);
	
	//if target is on the upper-side of plane, false 
	if(dist >= 0.0)
	{
		return false;	
	}

	float3 rO = cameraWorldPos.xyz;
	float3 rD = normalize(target - rO);
	float3 rD_VS = mul( (float3x3)viewMat, rD);
		
	if(rD_VS.z < 0.0)
	{
		return false;	
	}

    float denom = dot(normalVec, rD); 

    if (denom < 0.0)
	{ 
        float3 p0l0 = centerPoint - rO; 
        float t = dot(normalVec, p0l0) / denom; 

		if(t <= 0.0)
		{
			return false;
		}

		float3 hitPoint = rO + rD*t;	

		float3 gap = hitPoint - centerPoint;
		
		float xGap = dot(gap, thisPlane.rotMat[0].xyz);
		float yGap = dot(gap, thisPlane.rotMat[1].xyz);

		//float xGap = dot(gap, thisPlanesMat[0].xyz);
		//float yGap = dot(gap, thisPlanesMat[1].xyz);

		float width = thisPlane.size.x * 0.5;
		float height = thisPlane.size.y * 0.5;

		if( (abs(xGap) <= width) && (abs(yGap) <= height))
		{
			reflectedPos = mul( viewProjMat , float4(hitPoint, 1.0) );
			reflectedPos /= reflectedPos.w;

			reflectedPos.xy = float2( (reflectedPos.x + 1.0) * 0.5, (1.0 - reflectedPos.y) * 0.5);

			float depth = DepthTexture.SampleLevel(defaultSampler,reflectedPos.xy, 0).r;

			if(depth <= reflectedPos.z)
			{
				return false;
			}
			
			if( reflectedPos.x < 0.0 || reflectedPos.y < 0.0  || reflectedPos.x > 1.0 || reflectedPos.y > 1.0 )
			{
				return false;
			}
			else
			{
				//check if it is also hit from other planes
				for(uint i=0; i <numPlanes; i++ )
				{
					if(i != index)
					{						
						PlaneInfo otherPlane = planeInfo[i];
						// assuming vectors are all normalized
						
						float3 otherNormalVec = otherPlane.rotMat[2].xyz;	
						

						float3 otherCenterPoint = otherPlane.centerPoint.xyz;

						float innerDenom = dot(otherNormalVec, rD); 

						if (innerDenom < 0.0)
						{ 
							float3 innerP0l0 = otherCenterPoint - rO; 
							float innerT = dot(otherNormalVec, innerP0l0) / innerDenom; 

							if(innerT <= 0.0)
								continue;
							else if(innerT < t)
							{
								float3 innerhitPoint = rO + rD*innerT;	
								float3 innergap = innerhitPoint - otherCenterPoint;
		
								float innerxGap = dot(innergap, otherPlane.rotMat[0].xyz);
								float inneryGap = dot(innergap, otherPlane.rotMat[1].xyz);

								float innerWidth = otherPlane.size.x * 0.5;
								float innerHeight = otherPlane.size.y * 0.5;

								// if it hits other planes
								if( (abs(innerxGap) <= innerWidth) && (abs(inneryGap) <= innerHeight))
								{
									return false;
								}								
							}	
						}
					}
				}

				return true; 				
			}
		}	
		else
			return false;
    } 
	else
		return false; 
} 

float4 getWorldPosition(float2 UV, float depth)
{
	float4 worldPos = mul(InvViewProjMat ,float4(UV.x * 2.0 - 1.0, (1.0 - UV.y) * 2.0 - 1.0, depth, 1.0));
	worldPos /= worldPos.w;
	return worldPos;
}

uint packInfo(float2 offset)
{
	uint CoordSys = 0;

	uint YInt = 0;
	int YFrac = 0;
	int XInt = 0;
	int XFrac = 0;

	//define CoordSystem
	if(abs(offset.y) < abs(offset.x) )
	{
		if(offset.x < 0.0) // 3
		{
			YInt = uint(-offset.x);
			YFrac = int(frac(offset.x)*8.0);
			
			XInt = int(offset.y);
			XFrac = int(frac(offset.y)*8.0);

			CoordSys = 3;
		}
		else // 1
		{
			YInt = uint(offset.x);
			YFrac = int(frac(offset.x)*8.0);
			
			XInt = int(offset.y);
			XFrac = int(frac(offset.y)*8.0);

			CoordSys = 1;
		}
	}
	else	
	{
		if(offset.y < 0.0) // 2
		{
			YInt = uint(-offset.y);
			YFrac = int(frac(offset.y)*8.0);
			
			XInt = int(offset.x);
			XFrac = int(frac(offset.x)*8.0);

			CoordSys = 2;
		}
		else // 0
		{
			YInt = uint(offset.y);
			YFrac = int(frac(offset.y)*8.0);
			
			XInt = int(offset.x);
			XFrac = int(frac(offset.x)*8.0);

			CoordSys = 0;
		}
	}

	return  ( (YInt & 0x00000fff ) << 20) | ( (YFrac & 0x00000007) << 17) | ( (XInt & 0x00000fff) << 5) | ( (XFrac & 0x00000007 )<< 2) | CoordSys;
}

[numthreads(128,1,1)]
void main(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)  
{	
	uint screenWidth = uint( viewPortSize.x );
	uint screenHeight = uint( viewPortSize.y );
	
	uint indexDX = DTid.x;	

	if(indexDX >= screenWidth * screenHeight)
		return;

	uint indexY = indexDX / screenWidth;
	uint indexX = indexDX - screenWidth * indexY;

	float2 fragUV = float2( ((float)indexX) / (viewPortSize.x), ((float)indexY) / (viewPortSize.y) );
		
	float depth = DepthTexture.SampleLevel(defaultSampler, fragUV, 0).r;

	//if there is no obj
	if(depth >= 1.0)
		return;

	float4 worldPos = getWorldPosition(fragUV, depth);
	
	float4 reflectedPos = float4(0.0, 0.0, 0.0, 0.0);
	float2 reflectedUV;
	float2 offset;


	float minDist = 1000000.0;
	

	for(uint i = 0; i < numPlanes; i++)
	{	
		if(intersectPlane( i, worldPos.xyz, fragUV, reflectedPos ))
		{			
			reflectedUV =  float2( reflectedPos.x * viewPortSize.x, reflectedPos.y * viewPortSize.y);
			offset = float2( (fragUV.x - reflectedPos.x) * viewPortSize.x, ( fragUV.y - reflectedPos.y) * viewPortSize.y);
			
			uint newIndex =  (uint)reflectedUV.x + (uint)(reflectedUV.y) * screenWidth;

			//pack info
			uint intermediateBufferValue = packInfo(offset);
			InterlockedMin( IntermediateBuffer[newIndex], intermediateBufferValue );					
		}	
	}
}