/*
 * Copyright (c) 2018 Kostas Anagnostou (https://twitter.com/KostasAAA).
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/ 

#define BACKFACE_CULLING 0
#include "raytracingCommon.h"

#define THREADX 8
#define THREADY 8
#define THREADGROUPSIZE (THREADX*THREADY)

cbuffer cbPerPass : register(b0)
{
	float4x4	projView;
	float4x4	invProjView;
	float4		rtSize;
	float4		lightDir; 
	float4		cameraPos;
}  
  
Texture2D<float>			depthBuffer : register(t1);
Texture2D<float4>			normalBuffer : register(t2);
Buffer<float4>				BVHTree : register(t3);
RWTexture2D<float>			outputRT : register(u4);

#define THREADX 8
#define THREADY 8
#define THREADGROUPSIZE (THREADX*THREADY)

[numthreads(THREADX, THREADY, 1)]
void main(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	bool collision = false;
	int offsetToNextNode = 1;
	 
	float depth = depthBuffer[DTid.xy].x;
	float3 normal = normalBuffer[DTid.xy].xyz;

	float NdotL = dot(normal, lightDir.xyz);

	//do not raytrace for sky pixels and for surfaces that point away from the light
	if (depth < 1 && NdotL > 0)
	{
		float2 uv = DTid.xy * rtSize.zw;

		//get world position from depth
		float4 clipPos = float4(2 * uv - 1, depth, 1);
		clipPos.y = -clipPos.y;

		float4 worldPos = mul(invProjView, clipPos);
		worldPos.xyz /= worldPos.w;

		float3 rayDir = lightDir.xyz;
		float3 rayDirInv = rcp(rayDir);

		//offset to avoid selfshadows
		worldPos.xyz += 5 * normal;

		float t = 0;
		float2 bCoord = 0;

		int dataOffset = 0;  
		bool done = false;

		[loop]
		while (offsetToNextNode != 0)
		{
			float4 element0 = BVHTree[dataOffset++].xyzw;
			float4 element1 = BVHTree[dataOffset++].xyzw;

			offsetToNextNode = int(element0.w);

			collision = false;

			if (offsetToNextNode < 0)
			{
				//try collision against this node's bounding box	
				float3 bboxMin = element0.xyz;
				float3 bboxMax = element1.xyz;

				//intermediate node check for intersection with bounding box
				collision = RayIntersectsBox(worldPos, rayDirInv, bboxMin.xyz, bboxMax.xyz);

				//if there is collision, go to the next node (left) or else skip over the whole branch
				if (!collision)
					dataOffset += abs(offsetToNextNode);
			}
			else if (offsetToNextNode > 0)
			{
				float4 element2 = BVHTree[dataOffset++].xyzw;

				float3 vertex0 = element0.xyz;
				float3 vertex1MinusVertex0 = element1.xyz;
				float3 vertex2MinusVertex0 = element2.xyz;

				//leaf node check for intersection with triangle
				collision = RayTriangleIntersect(worldPos, rayDir, vertex0.xyz, vertex1MinusVertex0.xyz, vertex2MinusVertex0.xyz, t, bCoord);

				if (collision)
				{
					break;
				}
			}

		};
	}

	outputRT[DTid.xy] =   1 - float(collision);
}