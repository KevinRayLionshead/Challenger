/*
 * Copyright (c) 2018 Kostas Anagnostou.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge). 
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file 
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.  
*/

#define BACKFACE_CULLING 0
#include"raytracingCommon.h" 

cbuffer cbPerPass : register(b0)
{
	float4		rtSize;
	int			sampleIndex;
	float3		pad;
}

Texture2D<float>			shadowsRT : register(t1);
RWTexture2D<float>			outputRT : register(u2);

// From "Temporal Reprojection Anti-Aliasing"
// https://github.com/playdeadgames/temporal
float3 ClipAABB(float3 aabbMin, float3 aabbMax, float3 prevSample, float3 avg)
{
#if 1
	// note: only clips towards aabb center (but fast!)
	float3 p_clip = 0.5 * (aabbMax + aabbMin);
	float3 e_clip = 0.5 * (aabbMax - aabbMin);

	float3 v_clip = prevSample - p_clip;
	float3 v_unit = v_clip.xyz / e_clip;
	float3 a_unit = abs(v_unit);
	float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

	if (ma_unit > 1.0)
		return p_clip + v_clip / ma_unit;
	else
		return prevSample;// point inside aabb
#else
	float3 r = prevSample - avg;
	float3 rmax = aabbMax - avg.xyz;
	float3 rmin = aabbMin - avg.xyz;

	const float eps = 0.000001f;

	if (r.x > rmax.x + eps)
		r *= (rmax.x / r.x);
	if (r.y > rmax.y + eps)
		r *= (rmax.y / r.y);
	if (r.z > rmax.z + eps)
		r *= (rmax.z / r.z);

	if (r.x < rmin.x - eps)
		r *= (rmin.x / r.x);
	if (r.y < rmin.y - eps)
		r *= (rmin.y / r.y);
	if (r.z < rmin.z - eps)
		r *= (rmin.z / r.z);

	return avg + r;
#endif
}
  
#define THREADX 8
#define THREADY 8
#define THREADGROUPSIZE (THREADX*THREADY)

[numthreads(THREADX, THREADY, 1)]
void main(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	float shadowFactor = shadowsRT[DTid.xy].x;  

#if USE_SHADOWS_AA  
	const float2 Sample4[4] =
	{
		float2(0,0),
		float2(1,0),
		float2(1,1),
		float2(0,1)
	};

	float clrMin = 99999999.0f;
	float clrMax = -99999999.0f;

	float m1 = 0.0f;
	float m2 = 0.0f;
	float mWeight = 0.0f;

	for (int y = -1; y <= 1; y++)
	{
		for (int x = -1; x <= 1; x++)
		{
			float2 samplePos = DTid.xy + float2(x, y);

			float tap = shadowsRT[samplePos].x;

			clrMin = min(clrMin, tap);
			clrMax = max(clrMax, tap);

			m1 += tap;
			m2 += tap * tap;
			mWeight += 1.0f;
		}
	}

	//load low res sample
	float history = outputRT[DTid.xy].x;

//	history = ClipAABB(clrMin.xxx, clrMax.xxx, history.xxx, m1.xxx / mWeight).x;

	float feedback =  0.8;
//	outputRT[DTid.xy] = shadowFactor;

	uint2 coord = 2 * (DTid.xy / 2) + Sample4[sampleIndex];
	 
	if (coord.x == DTid.x && coord.y == DTid.y)
		outputRT[coord] = shadowFactor;
	 
#else
	outputRT[DTid.xy] = shadowFactor;
#endif

} 