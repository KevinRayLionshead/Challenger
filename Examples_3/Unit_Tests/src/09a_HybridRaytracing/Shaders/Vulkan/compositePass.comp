/*
* Copyright (c) 2018 Kostas Anagnostou (https://twitter.com/KostasAAA).
*
* This file is part of The-Forge
* (see https://github.com/ConfettiFX/The-Forge).
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/

#version 450 core

#extension GL_EXT_samplerless_texture_functions : enable

layout(UPDATE_FREQ_NONE, binding = 0) uniform texture2D albedobuffer;
layout(UPDATE_FREQ_NONE, binding = 1) uniform texture2D lightbuffer;
layout(UPDATE_FREQ_NONE, binding = 2, rgba32f) uniform image2D outputRT;

#define THREADX 16
#define THREADY 16
#define THREADZ 1
#define THREADGROUPSIZE (THREADX*THREADY*THREADZ)

layout(local_size_x = THREADX, local_size_y = THREADY, local_size_z = THREADZ) in;

void main() 
{
	uvec3 DTid = gl_GlobalInvocationID;

	vec3 albedo = texelFetch(albedobuffer, ivec2(DTid.xy), 0).rgb;

	//linearise albedo before applying light to it
	albedo = pow(albedo , vec3(2.2));

	vec3 diffuse = texelFetch(lightbuffer, ivec2(DTid.xy), 0).rgb;  

	imageStore(outputRT, ivec2(DTid.xy), vec4(diffuse*albedo, 1));
}