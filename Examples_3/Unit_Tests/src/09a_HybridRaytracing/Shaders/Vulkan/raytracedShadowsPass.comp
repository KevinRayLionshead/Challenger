/*
 * Copyright (c) 2018 Kostas Anagnostou (https://twitter.com/KostasAAA).
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#version 450 core

#extension GL_EXT_samplerless_texture_functions : enable

#define BACKFACE_CULLING 0

#define USE_SHADOWS_AA 0

#define kEpsilon 0.00001

bool RayIntersectsBox(in vec3 origin, in vec3 rayDirInv, in vec3 BboxMin, in vec3 BboxMax)
{
	const vec3 t0 = (BboxMin - origin) * rayDirInv;
	const vec3 t1 = (BboxMax - origin) * rayDirInv;

	const vec3 tmax = max(t0, t1);
	const vec3 tmin = min(t0, t1);

	const float a1 = min(tmax.x, min(tmax.y, tmax.z));
	const float a0 = max(max(tmin.x, tmin.y), max(tmin.z, 0.0f));

	return a1 >= a0;
}

//Adapted from https://github.com/kayru/RayTracedShadows/blob/master/Source/Shaders/RayTracedShadows.comp
bool RayTriangleIntersect(
	const vec3 orig,
	const vec3 dir,
	vec3 v0,
	vec3 e0,
	vec3 e1,
	in out float t,
	in out vec2 bCoord)
{
	const vec3 s1 = cross(dir.xyz, e1);
	const float  invd = 1.0 / (dot(s1, e0));
	const vec3 d = orig.xyz - v0;
	bCoord.x = dot(d, s1) * invd;
	const vec3 s2 = cross(d, e0);
	bCoord.y = dot(dir.xyz, s2) * invd;
	t = dot(e1, s2) * invd;

	if (
#if BACKFACE_CULLING
		dot(s1, e0) < -kEpsilon ||
#endif
		bCoord.x < 0.0 || bCoord.x > 1.0 || bCoord.y < 0.0 || (bCoord.x + bCoord.y) > 1.0 || t < 0.0 || t > 1e9)
	{
		return false;
	}
	else
	{
		return true;
	}
}

bool RayTriangleIntersect(
	const vec3 orig,
	const vec3 dir,
	vec3 v0,
	vec3 e0,
	vec3 e1)
{
	float t = 0;
	vec2 bCoord = vec2(0,0);
	return RayTriangleIntersect(orig, dir, v0, e0, e1, t, bCoord);
}

layout(std140, UPDATE_FREQ_PER_FRAME, binding = 0) uniform cbPerPass 
{
	uniform mat4	projView;
	uniform mat4	invProjView;
	uniform vec4	rtSize;
	uniform vec4	lightDir;
	uniform vec4	cameraPos;
};

layout(UPDATE_FREQ_NONE, binding = 1) uniform texture2D depthBuffer;
layout(UPDATE_FREQ_NONE, binding = 2) uniform texture2D normalBuffer;
layout(UPDATE_FREQ_NONE, binding = 3) buffer BVHTree { vec4 BVHTreeData[]; };
layout(UPDATE_FREQ_NONE, binding = 4, r8) uniform image2D outputRT;

#define THREADX 8
#define THREADY 8
#define THREADZ 1
#define THREADGROUPSIZE (THREADX*THREADY*THREADZ)

layout(local_size_x = THREADX, local_size_y = THREADY, local_size_z = THREADZ) in;

void main()
{
	bool collision = false;
	int offsetToNextNode = 1;

	uvec3 DTid = gl_GlobalInvocationID;

	float depth = texelFetch(depthBuffer, ivec2(DTid.xy), 0).x;
	vec3 normal = texelFetch(normalBuffer, ivec2(DTid.xy), 0).xyz;

	float NdotL = dot(normal, lightDir.xyz);

	//do not raytrace for sky pixels and for surfaces that point away from the light
	if (depth < 1 && NdotL > 0)
	{
		vec2 uv = DTid.xy * rtSize.zw;

		//get world position from depth
		vec4 clipPos = vec4(uv.x * 2.0 - 1.0, (1.0 - uv.y) * 2.0 - 1.0, depth, 1);

		vec4 worldPos = invProjView * clipPos;
		worldPos.xyz /= worldPos.w;

		vec3 rayDir = lightDir.xyz;
		vec3 rayDirInv = 1 / rayDir;

		//offset to avoid selfshadows
		worldPos.xyz += 5 * normal;

		float t = 0;
		vec2 bCoord = vec2(0,0);

		int dataOffset = 0;  
		bool done = false;

		while (offsetToNextNode != 0)
		{		
			vec4 element0 = BVHTreeData[dataOffset++].xyzw;
			vec4 element1 = BVHTreeData[dataOffset++].xyzw;

			offsetToNextNode = int(element0.w);

			collision = false;

			if (offsetToNextNode < 0)
			{			
				//try collision against this node's bounding box	
				vec3 bboxMin = element0.xyz;
				vec3 bboxMax = element1.xyz;

				//intermediate node check for intersection with bounding box
				collision = RayIntersectsBox(worldPos.xyz, rayDirInv.xyz, bboxMin.xyz, bboxMax.xyz);

				//if there is collision, go to the next node (left) or else skip over the whole branch
				if (!collision)
					dataOffset += abs(offsetToNextNode);
			}
			else if (offsetToNextNode > 0)
			{
				vec4 element2 = BVHTreeData[dataOffset++].xyzw;

				vec3 vertex0 = element0.xyz;
				vec3 vertex1MinusVertex0 = element1.xyz;
				vec3 vertex2MinusVertex0 = element2.xyz;

				//leaf node check for intersection with triangle
				collision = RayTriangleIntersect(worldPos.xyz, rayDir, vertex0.xyz, vertex1MinusVertex0.xyz, vertex2MinusVertex0.xyz, t, bCoord);

				if (collision)
				{
					break;
				}
			}			
			
		}  
	}

	float shadowFactor =  1.0 - float(collision);

	imageStore(outputRT, ivec2(DTid.xy), vec4(shadowFactor.x, 0, 0,0));
}