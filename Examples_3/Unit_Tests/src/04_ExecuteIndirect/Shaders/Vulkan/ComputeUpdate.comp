/*
 * Copyright (c) 2018-2019 Confetti Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

//--------------------------------------------------------------------------------------------
//
// Copyright (C) 2009 - 2016 Confetti Interactive Inc.
// All rights reserved.
//
// This source may not be distributed and/or modified without expressly written permission
// from Confetti Interactive Inc.
//
//--------------------------------------------------------------------------------------------

#version 450 core

#define MAX_LOD_OFFSETS (10)

struct AsteroidDynamic
{
	mat4 transform;
    uint indexStart;
    uint indexEnd;
    uint padding[2];
};

struct AsteroidStatic
{
	vec4 rotationAxis;
	vec4 surfaceColor;
    vec4 deepColor;

    float scale;
	float orbitSpeed;
	float rotationSpeed;

    uint textureID;
    uint vertexStart;
    uint padding[3];
};

struct IndirectDrawCommand
{
    //uint drawID;
    uint indexCount;
    uint instanceCount;
    uint startIndex;
    int vertexOffset;
    uint startInstance;
    uint padding[3];
};

layout (std140, UPDATE_FREQ_PER_FRAME, binding=0) uniform uniformBlock
{
    uniform mat4 viewProj;
    uniform vec4 camPos;
    uniform float dt;
    uniform uint startIdx;
    uniform uint endIdx;
    uniform int numLODs;
    uniform int indexOffsets[MAX_LOD_OFFSETS];
};

layout (std430, UPDATE_FREQ_NONE, binding=1) readonly buffer asteroidsStatic
{
    AsteroidStatic asteroidsStaticBuffer[];
};

layout (std430, UPDATE_FREQ_NONE, binding=2) buffer asteroidsDynamic
{
    AsteroidDynamic asteroidsDynamicBuffer[];
};

layout (std430, UPDATE_FREQ_NONE, binding=3) writeonly buffer drawCmds
{
    IndirectDrawCommand indirectDrawBuffer[];
};

//taken from our math library
mat4 MakeRotationMatrix(float angle, vec3 axis)
{
    float s, c;
    s = sin(-angle);
    c = cos(-angle);
    float x,y,z;
    x = axis.x;
    y = axis.y;
    z = axis.z;
    float xy, yz, zx;
    xy = axis.x * axis.y;
    yz = axis.y * axis.z;
    zx = axis.z * axis.x;
    float oneMinusC = 1.0 - c;

	return mat4(
	x * x * oneMinusC + c , /*|*/xy * oneMinusC - z * s, /*|*/zx * oneMinusC + y * s, /*|*/0.0f,
	/*******************************************************************************************/
	xy * oneMinusC + z * s, /*|*/y * y * oneMinusC + c , /*|*/yz * oneMinusC - x * s, /*|*/0.0f,
	/*******************************************************************************************/
	zx * oneMinusC - y * s, /*|*/yz * oneMinusC + x * s, /*|*/z * z * oneMinusC + c , /*|*/0.0f,
	/*******************************************************************************************/
	0.0f,					/*|*/0.0f,					/*|*/0.0f,					  /*|*/1.0f);
}

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
    const float minSubdivSizeLog2 = log2(0.0019);

    uint asteroidIdx = gl_GlobalInvocationID.x + uint(startIdx);

    if (asteroidIdx >= endIdx)
        return;

    AsteroidStatic asteroidStatic = asteroidsStaticBuffer[asteroidIdx];
    AsteroidDynamic asteroidDynamic = asteroidsDynamicBuffer[asteroidIdx];

    mat4 orbit = MakeRotationMatrix(asteroidStatic.orbitSpeed * dt, vec3(0.0,1.0,0.0));
    mat4 rotate = MakeRotationMatrix(asteroidStatic.rotationSpeed * dt, asteroidStatic.rotationAxis.xyz);

    asteroidDynamic.transform = (orbit * asteroidDynamic.transform) * rotate;

    vec3 position = vec3(
        asteroidDynamic.transform[3][0],
        asteroidDynamic.transform[3][1],
        asteroidDynamic.transform[3][2]);

    float distToEye = length(position - camPos.xyz);

    if (distToEye <= 0)
        return;

    float relativeScreenSizeLog2 = log2(asteroidStatic.scale / distToEye);
    float LODfloat = max(0.0, relativeScreenSizeLog2 - minSubdivSizeLog2);
    uint LOD = min(numLODs - 1, uint(LODfloat));

    //setting start offset and index count
    uint startIdx = indexOffsets[LOD];
    uint endIdx = indexOffsets[LOD + 1];

    //drawCmds.elem[gl_GlobalInvocationID.x].drawID = asteroidIdx;
    indirectDrawBuffer[gl_GlobalInvocationID.x].startIndex = startIdx;
    indirectDrawBuffer[gl_GlobalInvocationID.x].indexCount = endIdx - startIdx;
    indirectDrawBuffer[gl_GlobalInvocationID.x].vertexOffset = int(asteroidStatic.vertexStart);
    indirectDrawBuffer[gl_GlobalInvocationID.x].startInstance = asteroidIdx;
    indirectDrawBuffer[gl_GlobalInvocationID.x].instanceCount = 1;

    asteroidsDynamicBuffer[asteroidIdx] = asteroidDynamic;
}
